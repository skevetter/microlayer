name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        type: choice
        options:
          - stable
          - nightly
          - rc

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: true

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Check binary size
        run: |
          SIZE=$(stat -c%s "target/${{ matrix.target }}/release/picolayer" 2>/dev/null || stat -f%z "target/${{ matrix.target }}/release/picolayer")
          echo "Binary size: $SIZE bytes"
          if [ $SIZE -gt 20000000 ]; then
            echo "Error: Binary size exceeds 20MB"
            exit 1
          fi

      - name: Create archive
        run: |
          cd target/${{ matrix.target }}/release
          tar czf picolayer-${{ matrix.target }}.tar.gz picolayer
          mv picolayer-${{ matrix.target }}.tar.gz ../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: picolayer-${{ matrix.target }}
          path: picolayer-${{ matrix.target }}.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Determine release type and version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)

            if [ "$RELEASE_TYPE" = "nightly" ]; then
              TAG="v${VERSION}-nightly.$(date +%Y%m%d)"
              PRERELEASE="true"
            elif [ "$RELEASE_TYPE" = "rc" ]; then
              # Find the latest RC number
              LATEST_RC=$(git tag -l "v${VERSION}-rc.*" | sort -V | tail -1 | grep -oP 'rc\.\K\d+' || echo "0")
              NEXT_RC=$((LATEST_RC + 1))
              TAG="v${VERSION}-rc.${NEXT_RC}"
              PRERELEASE="true"
            else
              TAG="v${VERSION}"
              PRERELEASE="false"
            fi
          else
            TAG="${GITHUB_REF#refs/tags/}"
            if [[ "$TAG" =~ (nightly|rc) ]]; then
              PRERELEASE="true"
            else
              PRERELEASE="false"
            fi
          fi

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "prerelease=${PRERELEASE}" >> $GITHUB_OUTPUT
          echo "Release tag: ${TAG}"
          echo "Prerelease: ${PRERELEASE}"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.tag }}
          draft: false
          prerelease: ${{ steps.version.outputs.prerelease }}
          generate_release_notes: true
          files: |
            artifacts/*/picolayer-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
