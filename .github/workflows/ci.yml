name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: ${{ vars.RUST_LOG || 'info' }}
  RUST_BACKTRACE: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          components: rustfmt, clippy
          targets: ${{ matrix.target }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy -- -D warnings

      - name: Install dependencies for cross-compilation (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev gcc-aarch64-linux-gnu

      - name: Run tests
        run: cargo test -- --nocapture

      - name: Build Release
        run: cargo build --release --target "${{ matrix.target }}"
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Check binary size
        run: |
          BIN="target/${{ matrix.target }}/release/picolayer"
          if [ ! -f "$BIN" ]; then
            BIN="target/release/picolayer"
          fi

          echo "Binary path: $BIN"

          if [ ! -f "$BIN" ]; then
            echo "Binary not found, skipping size check."
            exit 0
          fi

          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            SIZE=$(stat -f%z "$BIN")
          else
            SIZE=$(stat -c%s "$BIN")
          fi

          MB_SIZE=$((SIZE / 1024 / 1024))
          echo "Binary size: $MB_SIZE MB"
          if [ "$SIZE" -gt 20000000 ]; then
            echo "Warning: Binary size exceeds 20MB"
            exit 1
          fi
