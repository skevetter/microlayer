name: Nightly Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: true

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Check binary size
        run: |
          SIZE=$(stat -c%s "target/${{ matrix.target }}/release/picolayer" 2>/dev/null || stat -f%z "target/${{ matrix.target }}/release/picolayer")
          echo "Binary size: $SIZE bytes"
          if [ $SIZE -gt 20000000 ]; then
            echo "Error: Binary size exceeds 20MB"
            exit 1
          fi

      - name: Create archive
        run: |
          cd target/${{ matrix.target }}/release
          tar czf picolayer-${{ matrix.target }}.tar.gz picolayer
          mv picolayer-${{ matrix.target }}.tar.gz ../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: picolayer-${{ matrix.target }}
          path: picolayer-${{ matrix.target }}.tar.gz

  release:
    name: Create Nightly Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate nightly tag
        id: tag
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          TAG="v${VERSION}-nightly.$(date +%Y%m%d)"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Nightly tag: ${TAG}"

      - name: Delete existing nightly release
        run: |
          gh release delete ${{ steps.tag.outputs.tag }} --yes || true
          git push origin :refs/tags/${{ steps.tag.outputs.tag }} || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Nightly Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Nightly ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: true
          generate_release_notes: false
          body: |
            ⚠️ **Nightly Build** - Automated development build from the main branch
            
            This is a nightly pre-release build and may be unstable.
            
            For production use, please use the latest stable release.
            
            **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            **Commit**: ${{ github.sha }}
          files: |
            artifacts/*/picolayer-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
